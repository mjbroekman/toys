# __git_ps1 accepts 0 or 1 arguments (i.e., format string)
# when called from PS1 using command substitution
# in this mode it prints text to add to bash PS1 prompt (includes branch name)
#
# __git_ps1 requires 2 or 3 arguments when called from PROMPT_COMMAND (pc)
# in that case it _sets_ PS1. The arguments are parts of a PS1 string.
# when two arguments are given, the first is prepended and the second appended
# to the state string when assigned to PS1.
# The optional third parameter will be used as printf format string to further
# customize the output of the git-status string.
# In this mode you can request colored hints using GIT_PS1_SHOWCOLORHINTS=true
function __git_ps1 ()
{
    local pcmode=no
    local detached=no
    local ps1pc_start='\u@\h:\w '
    local ps1pc_end='\$ '
    local printf_format=' (%s) '

    case "$#" in
        2|3) pcmode=yes
            ps1pc_start="$1"
            ps1pc_end="$2"
        ;;
        0|1) printf_format=' (%s) '
        ;;
        *) return
        ;;
    esac

    local repo_info rev_parse_exit_code
    repo_info="$(git rev-parse --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --short HEAD 2>/dev/null)"
    rev_parse_exit_code="$?"

    if [ -z "$repo_info" ]; then
        if [ $pcmode = yes ]; then
            #In PC mode PS1 always needs to be set
            PS1="$ps1pc_start$ps1pc_end"
        fi
        return
    fi

    local short_sha
    if [ "$rev_parse_exit_code" = "0" ]; then
        short_sha="${repo_info##*$'\n'}"
        repo_info="${repo_info%$'\n'*}"
    fi
    local inside_worktree="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local bare_repo="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local inside_gitdir="${repo_info##*$'\n'}"
    local g="${repo_info%$'\n'*}"

    local r=""
    local b=""
    local step=""
    local total=""
    if [ -d "$g/rebase-merge" ]; then
        read b 2>/dev/null <"$g/rebase-merge/head-name"
        read step 2>/dev/null <"$g/rebase-merge/msgnum"
        read total 2>/dev/null <"$g/rebase-merge/end"
        if [ -f "$g/rebase-merge/interactive" ]; then
            r="|REBASE-i"
        else
            r="|REBASE-m"
        fi
    else
        if [ -d "$g/rebase-apply" ]; then
            read step 2>/dev/null <"$g/rebase-apply/next"
            read total 2>/dev/null <"$g/rebase-apply/last"
            if [ -f "$g/rebase-apply/rebasing" ]; then
                read b 2>/dev/null <"$g/rebase-apply/head-name"
                r="|REBASE"
            elif [ -f "$g/rebase-apply/applying" ]; then
                r="|AM"
            else
                r="|AM/REBASE"
            fi
        elif [ -f "$g/MERGE_HEAD" ]; then
            r="|MERGING"
        elif [ -f "$g/CHERRY_PICK_HEAD" ]; then
            r="|CHERRY-PICKING"
        elif [ -f "$g/REVERT_HEAD" ]; then
            r="|REVERTING"
        elif [ -f "$g/BISECT_LOG" ]; then
            r="|BISECTING"
        fi

        if [ -n "$b" ]; then
            :
        elif [ -h "$g/HEAD" ]; then
            # symlink symbolic ref
            b="$(git symbolic-ref HEAD 2>/dev/null)"
        else
            local head=""
            if ! read head 2>/dev/null <"$g/HEAD"; then
                if [ $pcmode = yes ]; then
                    PS1="$ps1pc_start$ps1pc_end"
                fi
                return
            fi
            # is it a symbolic ref?
            b="${head#ref: }"
            if [ "$head" = "$b" ]; then
                detached=yes
                b="$(
                case "${GIT_PS1_DESCRIBE_STYLE-}" in
                (contains)
                    git describe --contains HEAD ;;
                (branch)
                    git describe --contains --all HEAD ;;
                (describe)
                    git describe HEAD ;;
                (* | default)
                    git describe --tags --exact-match HEAD ;;
                esac 2>/dev/null)" ||

                b="$short_sha..."
                b="($b)"
            fi
        fi
    fi

    if [ -n "$step" ] && [ -n "$total" ]; then
        r="$r $step/$total"
    fi

    local w=""
    local i=""
    local s=""
    local u=""
    local c=""
    local p=""

    if [ "true" = "$inside_gitdir" ]; then
        if [ "true" = "$bare_repo" ]; then
            c="BARE:"
        else
            b="GIT_DIR!"
        fi
    elif [ "true" = "$inside_worktree" ]; then
        if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ] &&
           [ "$(git config --bool bash.showDirtyState)" != "false" ]
        then
            git diff --no-ext-diff --quiet --exit-code || w="*"
            if [ -n "$short_sha" ]; then
                git diff-index --cached --quiet HEAD -- || i="+"
            else
                i="#"
            fi
        fi
        if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ] &&
           [ -r "$g/refs/stash" ]; then
            s="$"
        fi

        if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ] &&
           [ "$(git config --bool bash.showUntrackedFiles)" != "false" ] &&
           git ls-files --others --exclude-standard --error-unmatch -- '*' >/dev/null 2>/dev/null
        then
            if [ ! -z "${ZSH_VERSION}" ]; then
                u="%${ZSH_VERSION+%}"
            fi
        fi

        if [ -n "${GIT_PS1_SHOWUPSTREAM-}" ]; then
            ___git_ps1_show_upstream
        fi
    fi

    local z="${GIT_PS1_STATESEPARATOR-" "}"

    # NO color option unless in PROMPT_COMMAND mode
    if [ $pcmode = yes ] && [ -n "${GIT_PS1_SHOWCOLORHINTS-}" ]; then
        ___git_ps1_colorize_gitstring
    fi

    b=${b##refs/heads/}
    if [ $pcmode = yes ]; then
        # In pcmode (and only pcmode) the contents of
        # $gitstring are subject to expansion by the shell.
        # Avoid putting the raw ref name in the prompt to
        # protect the user from arbitrary code execution via
        # specially crafted ref names (e.g., a ref named
        # '$(IFS=_;cmd=sudo_rm_-rf_/;$cmd)' would execute
        # 'sudo rm -rf /' when the prompt is drawn).  Instead,
        # put the ref name in a new global variable (in the
        # __git_ps1_* namespace to avoid colliding with the
        # user's environment) and reference that variable from
        # PS1.
        export __git_ps1_branch_name=$b
        # note that the $ is escaped -- the variable will be
        # expanded later (when it's time to draw the prompt)
        b="\${__git_ps1_branch_name}"
    fi

    local f="$w$i$s$u"
    local gitstring="$c$b${f:+$z$f}$r$p"

    if [ $pcmode = yes ]; then
        if [ "${__git_printf_supports_v-}" != yes ]; then
            gitstring=$(printf -- "$printf_format" "$gitstring")
        else
            printf -v gitstring -- "$printf_format" "$gitstring"
        fi
        PS1="$ps1pc_start$gitstring$ps1pc_end"
    else
        printf -- "$printf_format" "$gitstring"
    fi
}
