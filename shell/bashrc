# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+:}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth
export HISTTIMEFORMAT="%y/%m/%d %T "

# append to the history file, don't overwrite it
shopt -s histappend
shopt -s lithist

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Get git branch info
if [ -f ~/.git_prompt.sh ]; then
    source ~/.git_prompt.sh
fi

if [ -f ~/.bash_functions ]; then
    . ~/.bash_functions
fi

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

unset TRIMMED_PWD
TRIMMED_PWD=

export PROMPT_COMMAND="update_terminal_cwd ; trim_directory_length"

#### Colors
# Change 0; to 01; in order to change to bold colors
if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[0;32m\]\u@\h\[\033[00m\]:\[\033[0;34m\]$TRIMMED_PWD\[\033[00m\]\[\033[0;33m\]$(__git_ps1)\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:$TRIMMED_PWD$(__git_ps1)\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

export PATH=/usr/local/bin:/usr/bin:~/bin:/usr/local/sbin:/usr/local/clamav/bin:/usr/local/clamav/sbin:$PATH

# Add certain paths if brew is installed
if [ `which brew 2>&1 | grep -c "no brew"` -eq 0 ]; then
    if [ ! -z "$(brew --prefix php54 2>/dev/null)" ]; then
        export PATH="$PATH:$(brew --prefix php54)/bin:"
    fi
    if [ ! -z "$(brew --prefix go 2>/dev/null)" ]; then
        export GOPATH=~/scripts/go
        export PATH="$PATH:$(brew --prefix go)/libexec/bin:$GOPATH/bin"
        if [ ! -d $GOPATH ]; then
            mkdir -p $GOPATH
        fi
    fi
    if [ -f ~/.homebrew_token ]; then
        export HOMEBREW_GITHUB_API_TOKEN=`cat ~/.homebrew_token`
    fi
fi

# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/x86_64:~/lib
# export DYLD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib/x86_64:~/lib
export EDITOR=emacs
export PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig

if [ -x ~/.update_brew.sh ]; then
    ~/.update_brew.sh
fi

PERL_MB_OPT="--install_base \"$HOME/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=$HOME/perl5"; export PERL_MM_OPT;

if [ -x ~/.fortune.sh ]; then
    ~/.fortune.sh
fi

# Setting PATH for Python 2.7
# The orginal version is saved in .profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/2.7/bin:${PATH}"
export PATH

# Setting PATH for Python 3.5
# The orginal version is saved in .profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/3.5/bin:${PATH}"
export PATH

NEWPATH=":"
for p in `echo $PATH | sed -e 's/:/ /g'`; do
    if [ -d $p ]; then
        if [ `echo $NEWPATH | grep -c :$p:` -eq 0 ]; then
            NEWPATH="$NEWPATH$p:"
        fi
    fi
done

PATH=$( echo $NEWPATH | sed -e 's/:$//' -e 's/^://' )
export PATH
export PAGER="less -X"

